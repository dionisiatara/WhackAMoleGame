{"version":3,"sources":["lib/Firestore.js","components/GameOver.js","components/Hole.js","lib/constants.js","components/Level.js","components/Login.js","components/PlayAgain.js","components/Score.js","components/StartButton.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","GameOver","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getHighestScore","Firebase","firestore","collection","doc","playerName","get","then","exists","setState","highScore","data","updateHighestScore","finalScore","db","update","getLeaderBoard","scoreBoard","state","list","orderBy","limit","snapshot","forEach","item","push","react_default","a","createElement","className","map","d","idx","key","React","Component","Hole","moleIsWhacked","onClick","holeNumber","style","WebkitTransform","context","constants","GAME_LEVEL_EASY","GAME_LEVEL_HARD","GAME_TIMER","NUMBER_OF_HOLES","TIMER_INTERVAL","TIMER_TIMEOUT","Level","getLevelEasy","e","callBackFromLevelButton","getLevelHard","type","Login","onSubmit","preventDefault","error","onInput","target","value","callBackFromLogin","errorText","name","placeholder","onChange","PlayAgain","callBackFromPlayAgainButton","Score","score","StartButton","callBackFromStartButton","Timer","seconds","_this2","startCount","myTimeOut","setTimeout","myInterval","setInterval","callBackFromTimer","clearInterval","clearTimeout","App","loginCallBack","dataFromChild","startButtonCallBack","startButtonIsClicked","startGame","levelCallBack","levelIsPicked","levelPicked","timerCallBack","timer","playAgainCallBack","hasLoggedIn","gameHasStarted","gameHasEnded","currentScore","activeMole","lastMole","holesTotal","1","2","3","4","5","getPlayer","bind","assertThisInitialized","whackMole","inputName","set","catch","console","holes","i","holeObject","components_Hole","interval","showMoles","window","clearMoles","_this$setState","currentMole","Math","floor","random","defineProperty","button","welcomeText","scoreTab","gameOver","playAgain","pickLevel","components_Timer","createHoles","components_Score","components_StartButton","components_Level","components_GameOver","components_PlayAgain","components_Login","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d278243.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar config = {\n    apiKey: \"AIzaSyDXJdzMY0KryGeyLzKU2IviS09dfXLsczQ\",\n    authDomain: \"whack-a-mole-reactjs.firebaseapp.com\",\n    databaseURL: \"https://whack-a-mole-reactjs.firebaseio.com\",\n    projectId: \"whack-a-mole-reactjs\",\n    storageBucket: \"whack-a-mole-reactjs.appspot.com\",\n    messagingSenderId: \"394560249481\"\n  };\n  firebase.initializeApp(config);\n\nexport default firebase;","import React from 'react';\nimport Firebase from '../lib/Firestore';\n\nclass GameOver extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            highScore: 0,\n            list: []\n        }\n    }\n\n    /**\n     * Get the current player's highscore from the database.\n     */\n    getHighestScore = () => {\n        const db = Firebase.firestore();\n        db.collection(\"Players\").doc(this.props.playerName).get().then(doc => {\n            if (doc.exists) {\n              this.setState({\n                highScore: doc.data().highScore\n              });\n            } else {\n              // No such document\n            }\n          });\n    }\n\n    /**\n     * Update the current player's highscore in the database if final score > old high score.\n     */\n    updateHighestScore = () => {\n        const finalScore = this.props.finalScore;\n        const db = Firebase.firestore();\n\n        db.collection(\"Players\").doc(this.props.playerName).get().then(doc => {\n            if (doc.exists) {\n                if (finalScore > doc.data().highScore) {\n                    db.collection(\"Players\").doc(this.props.playerName).update({\n                        highScore: finalScore\n                    });\n                }\n                this.getHighestScore();\n            }\n        });\n    }\n\n    /**\n     * Populate the score list from the database.\n     */\n    getLeaderBoard = () => {\n        const db = Firebase.firestore();\n        var scoreBoard = this.state.list;\n        db.collection(\"Players\").orderBy(\"highScore\", \"desc\").limit(5).get().then(snapshot => {\n            snapshot.forEach(item => {\n                scoreBoard.push(item.data().playerName + \" \" + item.data().highScore)\n            });\n            this.setState({ list: scoreBoard })\n        });\n    }\n\n    render() {\n        return(\n            <div className=\"game-over\">\n                <h2>Game Over!</h2>\n                <h3>Your final score: {this.props.finalScore}</h3>\n                <h3>Your highest score: {this.state.highScore}</h3>\n                <h2>Leaderboard (Top 5)</h2>\n                <div className=\"score-board\">\n                    <ul>\n                        {this.state.list.map((d, idx) => <li key={idx}> <h4>{d}</h4> </li>)}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n\n    /**\n     * Executed after the first render.\n     */\n    componentDidMount() {\n        this.updateHighestScore();\n        this.getHighestScore();\n        this.getLeaderBoard();\n    }\n}\n\nexport default GameOver","import React from 'react';\n\nclass Hole extends React.Component {\n\n    /**\n     * Call back to main App.js\n     */\n    moleIsWhacked = () => {\n        this.props.onClick(this.props.holeNumber);\n        // console.log(this.props.holeNumber);\n    }\n\n    render() {\n        return (\n            <div className=\"game-hole-area\">\n                <div className=\"game-mole\"\n                    style={{WebkitTransform: this.props.context[this.props.holeNumber]}}\n                    onClick={this.moleIsWhacked}>\n                </div>\n                <div className=\"hole-location\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Hole","export default {\n    GAME_LEVEL_EASY: 1000,\n    GAME_LEVEL_HARD: 600,\n    GAME_TIMER: 30,\n    NUMBER_OF_HOLES: 5,\n    TIMER_INTERVAL: 1000,\n    TIMER_TIMEOUT: 1000\n}","import React from 'react';\n\nimport constants from '../lib/constants';\n\nclass Level extends React.Component {\n\n    /**\n     * Call back to main App.js\n     */\n    getLevelEasy = (e) => {\n        this.props.callBackFromLevelButton(constants.GAME_LEVEL_EASY);\n    }\n\n    /**\n     * Call back to main App.js\n     */\n    getLevelHard = (e) => {\n        this.props.callBackFromLevelButton(constants.GAME_LEVEL_HARD);\n    }\n\n    render() {\n        return (\n            <div>\n                <button className=\"level-button\" type=\"button\" onClick={this.getLevelEasy}>\n                    EASY\n                </button>\n                <button className=\"level-button\" type=\"button\" onClick={this.getLevelHard}>\n                    HARD\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Level","import React from 'react';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerName: \"\",\n            error: \"\"\n        };\n    }\n    \n    /**\n     * Call back to main App.js\n     */\n    onSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.playerName) {\n            this.props.onSubmit();\n        } else {\n            this.setState({\n                error: \"Please enter your name.\"\n            })\n        }\n    }\n\n    /**\n     * Save the user's input with every change that is made.\n     */\n    onInput = (e) => {\n        this.setState({\n            playerName: e.target.value\n        });\n        this.props.callBackFromLogin(e.target.value);\n    }\n\n    render() {\n        let errorText;\n        if (this.state.error) {\n            errorText = this.state.error;\n        }\n\n        return (\n            <div className=\"game-login\">\n                <form onSubmit={this.onSubmit}>\n                    <input\n                        type=\"text\"\n                        name=\"playerName\"\n                        placeholder=\"Player's name\"\n                        onChange={this.onInput}\n                        value={this.state.playerName}\n                    />\n                    <button className=\"login-button\" type=\"submit\">Login</button>\n                </form>\n                <h5 className=\"error-message\">{errorText}</h5>\n            </div>\n        );\n    }\n}\n\nexport default Login;","import React from 'react';\n\nclass PlayAgain extends React.Component {\n\n    render() {\n        return (\n            <button className=\"play-again-button\" type=\"button\" onClick={this.props.callBackFromPlayAgainButton}>\n                Play again?\n            </button>\n        );\n    }\n}\n\nexport default PlayAgain","import React from 'react';\n\nclass Score extends React.Component {\n    render() {\n        return (\n            <div>\n                <h3>Score: {this.props.score}</h3>\n            </div>\n        );\n    }\n}\n\nexport default Score","import React from 'react';\n\nclass StartButton extends React.Component {\n\n    render() {\n        return (\n            <button className=\"game-start-button\" type=\"button\" onClick={this.props.callBackFromStartButton}>\n                Start Game\n            </button>\n        );\n    }\n}\n\nexport default StartButton","import React from 'react';\n\nimport constants from '../lib/constants';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            seconds: 0\n        };\n    }\n\n    render() {\n        const {seconds} = this.state;\n        return (\n            <div>\n                <h3>Time Left: {seconds}</h3>\n            </div>\n        );\n    }\n\n    /**\n     * Executed after the first render.\n     * Used with delayed execution such as setTimeout or setInterval.\n     */\n    componentDidMount() {\n        const {startCount} = this.props;\n        this.setState({\n            seconds: startCount\n        });\n        this.myTimeOut = setTimeout( () => {\n            this.myInterval = setInterval( () => {\n                this.setState({\n                    seconds: this.state.seconds - 1\n                }, function() {\n                    this.props.callBackFromTimer(this.state.seconds);\n                });\n            }, constants.TIMER_INTERVAL);\n        }, constants.TIMER_TIMEOUT);\n        \n    }\n\n    /**\n     * Invoked immediately before a component is unmounted and destroyed.\n     * Perform cleanup in this method, such as invalidating timers.\n     */\n    componentWillUnmount() {\n        clearInterval(this.myInterval);\n        clearTimeout(this.myTimeOut);\n    }\n}\n\nexport default Timer","import React, { Component } from 'react';\nimport '../App.css';\n\nimport GameOver from './GameOver';\nimport Hole from './Hole';\nimport Level from './Level';\nimport Login from './Login.js';\nimport PlayAgain from './PlayAgain';\nimport Score from './Score';\nimport StartButton from './StartButton';\nimport Timer from './Timer';\n\nimport constants from '../lib/constants';\nimport Firebase from '../lib/Firestore';\n\nclass App extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n        playerName: \"\",\n        score: 0, // high score\n        currentScore: 0,\n        hasLoggedIn: false,\n        startButtonIsClicked: false,\n        gameHasStarted: false,\n        gameHasEnded: false,\n        levelIsPicked: false,\n        levelPicked: 0,\n        activeMole: 0,\n        lastMole: 0,\n        timer: constants.GAME_TIMER,\n        holesTotal: constants.NUMBER_OF_HOLES,\n\n        // Moles\n        1:'translate(0, 60%)',\n        2:'translate(0, 60%)',\n        3:'translate(0, 60%)',\n        4:'translate(0, 60%)',\n        5:'translate(0, 60%)'\n    };\n    this.getPlayer = this.getPlayer.bind(this);\n    this.whackMole = this.whackMole.bind(this);\n  }\n\n  /**\n   * Call back to Login.js to get the player's name from the form.\n   */\n  loginCallBack = (dataFromChild) => {\n    this.setState({\n      playerName: dataFromChild\n    });\n  }\n\n  /**\n   * Call back to StartButton.js to update the state.\n   */\n  startButtonCallBack = () => {\n    this.setState({\n      startButtonIsClicked: true\n    }, function() {\n      this.startGame();\n    });\n  }\n\n  /**\n   * Call back to Level.js to get the level picked.\n   */\n  levelCallBack = (dataFromChild) => {\n    this.setState({\n      levelIsPicked: true,\n      levelPicked: dataFromChild\n    });\n  }\n\n  /**\n   * Call back to Timer.js to get the current timer.\n   */\n  timerCallBack = (dataFromChild) => {\n    this.setState({\n      timer: dataFromChild\n    });\n  }\n\n  /**\n   * Call back to PlayAgain.js\n   */\n  playAgainCallBack = () => {\n    this.setState({\n      hasLoggedIn: true,\n      gameHasStarted: false,\n      gameHasEnded: false,\n      startButtonIsClicked: true,\n      currentScore: 0,\n      timer: constants.GAME_TIMER\n    }, function() {\n      this.startGame();\n    });\n  }\n\n\n  /**\n   * Get the player's name from Login Component and add it to Firestore if does not exist yet.\n   */\n  getPlayer() {\n    // Setup Firestore\n    const db = Firebase.firestore();\n\n    // Get the player's name\n    const inputName = this.state.playerName;\n    \n    // Check if player already exists\n    db.collection(\"Players\").doc(inputName).get()\n    .then(doc => {\n        if (!doc.exists) {\n            // Add the new player to the Firestore\n            db.collection(\"Players\").doc(inputName).set({\n              playerName: inputName,\n              highScore: 0\n            })\n            .then(function() {\n              // console.log(\"A new player has been added.\");\n            })\n            .catch(function(error) {\n                console.error(\"Error writing document: \", error);\n            });\n        } else {\n            // console.log(\"Player already exists.\");\n        }\n    }).catch(error => {\n      // Error getting document\n    })\n\n    // Update the login state\n    this.setState({\n      hasLoggedIn: true\n    });\n  }\n\n  /**\n   * Create the holes for the mole.\n   */\n  createHoles() {\n    var holes = [];\n    for (let i = 1; i <= this.state.holesTotal; i++) {\n      var holeObject = <Hole context={this.state} holeNumber={i} key={i} onClick={this.whackMole}/>\n      holes.push(holeObject);\n    }\n\n    // Place the holes on the game board.\n    return (\n      <div className=\"game-board\">\n        {holes}\n      </div>\n    );\n  }\n\n  /**\n   * Start the game.\n   */\n  startGame() {\n    if (this.state.gameHasStarted) {\n      return;\n    }\n    this.setState({\n      gameHasStarted: true,\n      score: 0\n    });\n\n    const interval = setInterval( () => {\n        this.showMoles();\n        if (this.state.timer === 0) {\n          window.clearInterval(interval);\n          this.clearMoles();\n          this.setState({\n            gameHasStarted: false,\n            gameHasEnded: true,\n            activeMole: 0\n          });\n        }\n    }, this.state.levelPicked); // interval speed\n  }\n\n  /**\n   * Show the mole in different holes.\n   */\n  showMoles() {\n    // Clear the previous mole, if any, before displaying the next one\n    this.clearMoles();\n    let currentMole = Math.floor(Math.random() * this.state.holesTotal) + 1; // returns a random integer from 1 to total # of holes\n    if (this.state.lastMole === currentMole) {\n      this.showMoles();\n      return;\n    }\n    this.setState({\n      [currentMole]: 'translate(0, 5%)',\n      lastMole: currentMole,\n      activeMole: currentMole\n    });\n  }\n\n  /**\n   * Clear the previous moles.\n   */\n  clearMoles() {\n    for (let i = 1; i <= this.state.holesTotal; i++) {\n      this.setState({\n        [i]: 'translate(0, 60%)'\n      });\n    }\n  }\n\n  /**\n   * Mole is whacked, add 1 point to the score.\n   */\n  whackMole(holeNumber) {\n    if (holeNumber === this.state.activeMole) {\n      this.setState({\n        currentScore: this.state.currentScore + 1\n      });\n    }\n  }\n\n  /**\n   * --- RENDER ---\n   */\n  render() {\n    const hasLoggedIn = this.state.hasLoggedIn;\n    const gameHasStarted = this.state.gameHasStarted;\n    const gameHasEnded = this.state.gameHasEnded;\n    const levelIsPicked = this.state.levelIsPicked;\n    const highScore = this.state.score;\n    let button, welcomeText, timer, startGame, scoreTab, gameOver, playAgain, pickLevel;\n\n    // Check if the player has logged in\n    if (hasLoggedIn && !gameHasEnded) {\n      if (!levelIsPicked) {\n        pickLevel = <Level context={this} callBackFromLevelButton={this.levelCallBack}/>\n      // Main game screen\n      } else if (gameHasStarted) {\n        timer = <Timer context={this} callBackFromTimer={this.timerCallBack} startCount={this.state.timer}/>\n        startGame = this.createHoles();\n        scoreTab = <Score context={this} score={this.state.currentScore}/>;\n      } else {\n        button = <StartButton context={this} callBackFromStartButton={this.startButtonCallBack}/>\n        welcomeText = <h2 className=\"welcome-message\">Welcome, {this.state.playerName}!</h2>\n      }\n    // Game is over\n    } else if (gameHasEnded) {\n      gameOver = <GameOver context={this} finalScore={this.state.currentScore} playerName={this.state.playerName}\n                    highScore={highScore}/>\n      playAgain = <PlayAgain context={this} callBackFromPlayAgainButton={this.playAgainCallBack}/>\n    // Main login screen\n    } else {\n      button = <Login onSubmit={this.getPlayer} context={this} callBackFromLogin={this.loginCallBack}/>\n    }\n\n    return (\n      <div className=\"main-area\">\n        <div className=\"game\">\n          <h1 className=\"game-title\">Whack a Mole!</h1>\n          {welcomeText} {pickLevel} {button} {timer}\n          {startGame} {scoreTab}\n          {gameOver}\n          {playAgain}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}